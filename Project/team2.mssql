-- phpMyAdmin SQL Dump
-- version 4.0.10.20
-- https://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: May 11, 2017 at 02:37 PM
-- Server version: 5.1.73
-- PHP Version: 5.3.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `team2`
--

-- --------------------------------------------------------

--
-- Table structure for table `contact`
--

CREATE TABLE IF NOT EXISTS `contact` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nameid` varchar(10) NOT NULL,
  `name` varchar(50) NOT NULL,
  `bio` mediumtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `contact`
--

INSERT INTO `contact` (`id`, `nameid`, `name`, `bio`) VALUES
(1, 'brendan', 'Brendan McGeever', '<img src="../assets/images/brendan.png" alt="Brendan" id="contactImg"/>\r\n\r\n<h2>Name:</h2> <p>Brendan McGeever </p>\r\n<h2> From:</h2> <p> Boulder, CO </p>\r\n<h2> Education:</h2> <p> Completed his Bachelor of Arts in Political Science at Colorado State University in Fort Collins, CO, and spent several years after his time at CSU traveling and working in the retail industry.</p>\r\n<h2> Hobbies:</h2> <p> His hobbies include tinkering with Raspberry Pi computers, climbing mountains, and attending video gaming conferences and expo''s as often as possible.</p>\r\n'),
(2, 'erica', 'Erica Parker', '<img src="../assets/images/erica.png" alt="Erica" id="contactImg"/>\r\n\r\n<h2> Name: </h2> <p>Erica Parker</p>\r\n<h2> From: </h2> <p> Leroy, NY</p>\r\n<h2> Education: </h2> <p> A third/fourth year Computer Networking and Information Technologies student at RIT. When she''s not busy doing homework or studying for exams.\r\nShe is an ambassador for the information sciences and technologies department and was just elected as student government senator for all of GCCIS. Erica hopes to graduate college and work on improving wireless capabilities of biomedical technology. </p>\r\n<h2> Hobbies: </h2> <p> She likes to spend time on campus attending clubs, hanging out with friends and family, and being home with her puppy. </p>'),
(3, 'kengar', 'Kengar Clark', '<img src="../assets/images/kengar.png" alt="Kengar" id="contactImg"/>\r\n<h2> Name: </h2> <p>Kenneth (Kengar) Clark</p>\r\n<h2> From: </h2> <p>Greenwich, CT</p>\r\n<h2> Education: </h2> <p>Currently studying Human Centered Computing at the Rochester Institute of Technology. He intends to create and develop programs for clients based on the abilities and disabilities.  </p> \r\n<h2> Hobbies </h2> <p>\r\nHis hobbies include video games, watching anime, attending conventions across the country, cosplaying, and playing with nerf blasters.</p>\r\n'),
(4, 'kevin', 'Kevin Reynolds', '<img src="../assets/images/kevin.png" alt="Kevin" id="contactImg"/>\r\n<h2> Name: </h2> <p>Kevin Reynolds</p>\r\n<h2> From: </h2> <p>Shrewsbury, MA</p>\r\n<h2> Education: </h2> <p> A second/third year Web and Mobile Computing student with a minor in Mechanical Engineering at RIT. </p>\r\n<h2> Hobbies: </h2> <p> My favorite activities are longboarding, sailing, and snowboarding. I also really enjoy photography, and sometimes feel inspired to go out and take pictures.</p>\r\n'),
(5, 'lei', 'Lei Mon', '<img src="../assets/images/lei.png" alt="Lei" id="contactImg"/>\r\n<h2> Name: </h2> <p> Lei Mon </p>\r\n<h2> From: </h2> <p>International student from Myanmar. </p>\r\n<h2> Education: </h2> <p> Lei is a 3rd year Web and Mobile Computing student at RIT. She received an Engineering Science Degree from MCC in 2015.</p>\r\n<h2> Hobbies: </h2> <p> She loves to play pocket billiards and bowling with her friends when she has free time from school. She enjoys music, photography and travelling and also she is interested in learning foreign languages. Her first language is Burmese, second language is English, she is currently taking advanced Chinese class at RIT and went to Japanese school for 2 years back home. \r\n</p>');

-- --------------------------------------------------------

--
-- Table structure for table `pages`
--

CREATE TABLE IF NOT EXISTS `pages` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `page` varchar(10) NOT NULL,
  `content` longtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `pages`
--

INSERT INTO `pages` (`id`, `page`, `content`) VALUES
(1, 'home', 'To Be Determined'),
(2, 'glossary', '<div id="top"></div>\r\n<form method="get" name="searchform" action="http://www.google.com/search" target="_blank">\r\n    <input type="hidden" name="sitesearch" value="http://kelvin.ist.rit.edu/~team2/Project/pages/glossary.php">\r\n    <input type="text" name="as_q" size="20" value="Search our site">\r\n    <input type="submit" value="Search" title="Search">\r\n</form>\r\n\r\n<div class=''glossnav''>\r\n<a href = "#hash"> # </a>\r\n<a href = "#c"> c </a>\r\n<a href ="#f"> f </a>\r\n<a href ="#l"> l </a>\r\n<a href ="#m"> m </a>\r\n<a href ="#p"> p </a>\r\n<a href ="#r"> r </a>\r\n<a href ="#s"> s </a>\r\n<a href ="#v"> v </a>\r\n\r\n</div> \r\n        <p class="h2 reflinks pink"><a name ="hash"> # </a> </p>  \r\n\r\n<dl>\r\n	<dt>~ Home directory of the logged on user. </dt>\r\n		<dd>EXAMPLE:<br/>\r\n			cd ~ \r\n		</dd>\r\n	\r\n		<dt>. - The current working directory. </dt>\r\n			<dd style="color:##A6E22E;">EXAMPLE: <br/>\r\n				cd .</dd>\r\n				\r\n		<dt> .. - Parent of the current working directory</dt>\r\n			<dd> EXAMPLE:<br/>\r\n				cd .. </dd>\r\n               <p class="h2 reflinks pink"><a name ="c"> c </a> </p> \r\n               <p class="backToTop h4"> <a href ="#"> Top </a></p> \r\n		<dt> cat - concatenate files and print on the standard output </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			cat [OPTION]... [FILE]... <br/>\r\n			 OPTIONS:  <br/>\r\n			<dl>\r\n				<dt> -A, --show-all</dt>\r\n					<dd> equivalent to -vET </dd>\r\n				<dt> -b, --number-non blank </dt>\r\n					<dd> number nonempty output lines </dd> \r\n				<dt> -e, equivalent to -vE</dt>\r\n				<dt> -E, --show-ends </dt>\r\n					<dd> display $ at end of each line </dd>\r\n				<dt> -n, --number </dt> \r\n					<dd> number all output lines </dd> \r\n			</dl> \r\n			\r\n		<dt>cd - Change the shell working directory.</dt>\r\n			<dd> SYNOPSIS: <br/>\r\n				cd [-L|-P] [dir] <br/>\r\n				OPTIONS: <br/>\r\n			<dl>\r\n				<dt>-L force symbolic links to be followed</dt>\r\n				<dd style="visibility: hidden;"> </dd>\r\n				<dt>-P use the physical directory structure without following symbolic links</dt>\r\n				<dd style="visibility: hidden;"> </dd>\r\n			</dl> \r\n		</dd>\r\n		\r\n		<dt>chmod - change file mode bits </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			chmod [OPTION]... MODE[,MODE]... FILE... <br/>\r\n			chmod [OPTION]... OCTAL-MODE FILE... <br/>\r\n			chmod [OPTION]... --reference=RFILE FILE...<br/>\r\n			OPTIONS: <br/>\r\n			<dl>\r\n				<dt> -c, --changes </dt>\r\n					<dd> like verbose but report only when a change is made </dd> \r\n				<dt> --no-preserve-root </dt> \r\n					<dd> do not treat ''/'' specially (the default) </dd> \r\n				<dt> --preserve-root</dt> \r\n					<dd> fail to operate recursively on ''/'' </dd>\r\n				<dt> -f, --silent, --quiet </dt> \r\n					<dd> suppress most error messages </dd>\r\n				<dt>-v, --verbose </dt> \r\n				<dd> output a diagnostic for every file processed</dd>\r\n			</dl> \r\n		</dd>\r\n		\r\n		<dt>cp - copy files and directories</dt>\r\n			<dd> SYNOPSIS: cp [OPTION]... [-T] SOURCE DEST <br/>\r\n				cp [OPTION]... SOURCE... DIRECTORY <br/>\r\n				cp [OPTION]... -t DIRECTORY SOURCE... <br/>\r\n				OPTIONS: <br/>\r\n				<dl>\r\n					<dt>-a, --archive </dt>\r\n						<dd> same as -dR --preserve=all </dd>\r\n\r\n					<dt> --attributes-only</dt> \r\n						<dd> don''t copy the file data, just the attributes </dd> \r\n\r\n					<dt> --backup[=CONTROL] </dt> \r\n						<dd> make a backup of each existing destination file </dd> \r\n\r\n					<dt> -b like </dt>\r\n						<dd> --backup but does not accept an argument </dd> \r\n\r\n					<dt> --copy-contents </dt> \r\n						<dd> copy contents of special files when recursive </dd> \r\n\r\n					<dt> -d same as --no-dereference --preserve=links </dt>\r\n						<dd style="visibility: hidden;"> </dd>\r\n\r\n					<dt> -f, --force </dt> \r\n						<dd> if an existing destination file cannot be opened, remove it and try again </dd>\r\n				</dl>\r\n			</dd>\r\n		<p class="h2 reflinks pink"> <a name ="f"> f </a> </p> \r\n                <p class="backToTop h4"> <a href ="#"> Top </a></p> \r\n		<dt>find - search for files in a directory hierarchy </dt>\r\n			<dd>SNYOPSIS: <br/>\r\n			find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression] </dd>\r\n		\r\n               <p class="h2 reflinks pink"> <a name ="g"> g </a></p>\r\n               <p class="backToTop h4"> <a href ="#"> Top </a></p> \r\n               	\r\n		<dt> grep, egrep, fgrep - print lines matching a pattern </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			grep [OPTIONS] PATTERN [FILE...] <br/>\r\n			grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...] </dd>\r\n		\r\n                <p class="h2 reflinks pink"> <a name ="l"> l </a></p> 	\r\n                <p class="backToTop h4"> <a href ="#"> Top </a></p> \r\n		<dt> ls - list directory contents </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			ls [OPTION]... [FILE]...<br/>\r\n			OPTIONS: <br/>\r\n			<dl>\r\n				<dt> -a, --all </dt> \r\n					<dd> do not ignore entries starting with . </dd> \r\n\r\n				<dt> -A, --almost-all </dt> \r\n					<dd> do not list implied . and .. </dd> \r\n\r\n				<dt> --author </dt> \r\n					<dd> with -l, print the author of each file </dd> \r\n\r\n				<dt> -b, --escape</dt> \r\n					<dd> print C-style escapes for nongraphic characters </dd> \r\n\r\n				<dt> --block-size=SIZE </dt>\r\n					<dd> scale sizes by SIZE before printing them; e.g., ''--block-size=M'' prints sizes in units of 1,048,576 bytes; see SIZE format below </dd> \r\n\r\n				<dt> -B, --ignore-backups </dt> \r\n					<dd> do not list implied entries ending with ~ </dd> \r\n\r\n				<dt> -c with -lt: </dt>\r\n					<dd> sort by, and show, ctime (time of last modification of file status information); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first </dd> \r\n\r\n				<dt> -C  list entries by columns </dt> \r\n\r\n				<dt> --color[=WHEN] </dt> \r\n					<dd> colorize the output; WHEN can be ''always'' (default if omitted), ''auto'', or ''never''; more info below </dd> \r\n\r\n				<dt> -d, --directory </dt> \r\n					<dd> list directories themselves, not their contents </dd> \r\n\r\n				<dt> -D, --dired </dt> \r\n					<dd> generate output designed for Emacs'' dired mode </dd> \r\n\r\n				<dt> -f </dt>\r\n					<dd> do not sort, enable -aU, disable -ls --color </dd> \r\n\r\n				<dt> -F, --classify </dt> \r\n					<dd> append indicator (one of */=>@|) to entries </dd> \r\n\r\n				<dt> --file-type </dt> \r\n					<dd> likewise, except do not append ''*'' </dd> \r\n\r\n				<dt> --format=WORD </dt> \r\n					<dd> across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C </dd> \r\n\r\n				<dt> --full-time </dt> \r\n					<dd> like -l --time-style=full-iso </dd> \r\n\r\n				<dt> -g like -l, but do not list owner </dt> \r\n\r\n				<dt> --group-directories-first </dt> \r\n					<dd> group directories before files can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping </dd> \r\n\r\n				<dt> -G, --no-group </dt> \r\n					<dd> in a long listing, don''t print group names </dd> \r\n\r\n				<dt> -h, --human-readable </dt> \r\n					<dd> with -l and/or -s, print human readable sizes (e.g., 1K 234M2G) </dd> \r\n\r\n				<dt> --si </dt>\r\n					<dd> likewise, but use powers of 1000 not 1024 </dd> \r\n\r\n				<dt> -H </dt>\r\n					<dd> --dereference-command-line follow symbolic links listed on the command line </dd> \r\n\r\n				<dt> --dereference-command-line-symlink-to-dir</dt>\r\n					<dd> follow each command line symbolic link </dd> \r\n\r\n				<dt> --hide=PATTERN </dt> \r\n					<dd> do not list implied entries matching shell PATTERN (overridden by -a or -A) </dd>\r\n\r\n				<dt> --indicator-style=WORD </dt>\r\n					<dd> append indicator with style WORD to entry names: none\r\n					(default), slash (-p), file-type (--file-type), classify (-F) </dd> \r\n\r\n				<dt> -i, --inode </dt> \r\n					<dd> print the index number of each file </dd> \r\n\r\n				<dt> -I, --ignore=PATTERN </dt> \r\n					<dd> do not list implied entries matching shell PATTERN </dd> \r\n\r\n				<dt> -k, --kibibytes </dt> \r\n					<dd> default to 1024-byte blocks for disk usage </dd> \r\n\r\n				<dt> -l use a long listing format </dt>\r\n\r\n				<dt> -L, --dereference </dt> \r\n					<dd> when showing file information for a symbolic link, show information for the file the link references rather than for the link itself </dd> \r\n\r\n				<dt> -m </dt>\r\n					<dd> fill width with a comma separated list of entries </dd> \r\n\r\n				<dt> -n, --numeric-uid-gid </dt>\r\n					<dd> like -l, but list numeric user and group IDs </dd> \r\n\r\n				<dt> -N, --literal </dt> \r\n					<dd> print entry names without quoting </dd> \r\n\r\n				<dt> -o </dt>\r\n					<dd> like -l, but do not list group information </dd> \r\n\r\n				<dt> -p, --indicator-style=slash append / indicator to directories </dt> \r\n					<dd style="visibility: hidden;"> </dd>\r\n\r\n				<dt> -q, --hide-control-chars </dt> \r\n					<dd> print ? instead of nongraphic characters </dd> \r\n\r\n   				<dt> -show-control-chars </dt> \r\n					<dd> show nongraphic characters as-is (the default, unless program is ''ls'' and output is a terminal) </dd> \r\n\r\n				<dt> -Q, --quote-name </dt> \r\n					<dd> enclose entry names in double quotes </dd> \r\n\r\n				<dt> --quoting-style=WORD </dt> \r\n					<dd> use quoting style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-escape-always, c, escape </dd> \r\n\r\n				<dt> -r, --reverse </dt> \r\n					<dd> reverse order while sorting </dd> \r\n\r\n				<dt> -R, --recursive </dt> \r\n					<dd> list subdirectories recursively </dd> \r\n\r\n				<dt> -s, --size </dt> \r\n					<dd> print the allocated size of each file, in blocks </dd> \r\n\r\n				<dt> -S sort by file size, largest first </dt> \r\n\r\n				<dt> --sort=WORD </dt> \r\n					<dd> sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X) </dd>\r\n\r\n				<dt> --time=WORD </dt> \r\n					<dd> with -l, show time as WORD instead of default modification time: atime or access or use (-u); ctime or status (-c); also use specified time as sort key if --sort=time (newest first) </dd> \r\n\r\n				<dt> --time-style=STYLE </dt> \r\n					<dd> with -l, show times using style STYLE: full-iso, long-iso, iso, locale, or +FORMAT; FORMAT is interpreted like in ''date''; if FORMAT is FORMAT1 <br/> \r\n					FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files; if STYLE is prefixed with ''posix-'', STYLE takes effect only outside the POSIX locale </dd> \r\n\r\n				<dt> -t </dt>\r\n					<dd> sort by modification time, newest first </dd> \r\n\r\n				<dt> -T, --tabsize=COLS </dt> \r\n					<dd> assume tab stops at each COLS instead of 8 </dd> \r\n\r\n				<dt> -u </dt>\r\n					<dd> with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first </dd> \r\n\r\n				<dt> -U </dt>\r\n					<dd> do not sort; list entries in directory order </dd> \r\n\r\n				<dt> -v </dt>\r\n					<dd> natural sort of (version) numbers within text </dd> \r\n\r\n				<dt> -w, --width=COLS </dt> \r\n					<dd> set output width to COLS.  0 means no limit </dd> \r\n\r\n				<dt> -x </dt>\r\n					<dd> list entries by lines instead of by columns </dd> \r\n\r\n				<dt> -X </dt>\r\n					<dd> sort alphabetically by entry extension </dd>\r\n\r\n				<dt> -Z, --context </dt>\r\n					<dd> print any security context of each file </dd> \r\n\r\n				</dl>\r\n			</dd> \r\n		 <p class="h2 reflinks pink"> <a name ="m"> m </a></p> \r\n                 <p class="backToTop h4"> <a href ="#"> Top </a></p> 	\r\n		<dt> man - format and display the on-line manual pages  </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			man [-acdfFhkKtwW] [--path] [-m system] [-p string] [-C config_file] [-M pathlist] [-P pager] [-B browser] [-H htmlpager] [-S section_list] [section] name ... </dd>\r\n			\r\n		<dt> mkdir - make directories </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			mkdir [OPTION]... DIRECTORY... <br/>\r\n			OPTIONS: <br/>\r\n			Create the DIRECTORY(ies), if they do not already exist. <br/>\r\n			<dl>\r\n				<dt>-m, --mode=MODE </dt>\r\n					<dd> set file mode (as in chmod), not a=rwx - umask </dd> \r\n\r\n				<dt> -p, --parents </dt> \r\n					<dd> no error if existing, make parent directories as needed </dd> \r\n\r\n				<dt> -v, --verbose </dt> \r\n					<dd> print a message for each created directory </dd> \r\n\r\n				<dt> -Z 	</dt> \r\n					<dd> set SELinux security context of each created directory to the default type</dd>\r\n\r\n				<dt> --context[=CTX] </dt> \r\n					<dd> like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX </dd> \r\n\r\n				<dt> --help display this help and exit </dt> \r\n\r\n				<dt> --version </dt> \r\n					<dd> output version information and exit </dd> \r\n			</dl>\r\n		</dd>\r\n		\r\n		<dt> more - file perusal filter for crt viewing </dt>\r\n			<dd> SYNOPSIS: <br/>\r\n			more [options] file... <br/>\r\n			OPTIONS: <br/>\r\n			Options are also taken from the environment variable MORE (make sure\r\n			to precede them with a dash (-)) but command-line options will\r\n			override those. <br/> \r\n		<dl>\r\n			<dt> -d </dt>\r\n				<dd> Prompt with "[Press space to continue, ''q'' to quit.]", and\r\n				display "[Press ''h'' for instructions.]" instead of ringing the\r\n				bell when an illegal key is pressed. </dd> \r\n\r\n			<dt> -l </dt>\r\n				<dd> Do not pause after any line containing a ^L (form feed). </dd> \r\n\r\n			<dt> -f  </dt>\r\n				<dd> Count logical lines, rather than screen lines (i.e., long lines are not folded). </dd> \r\n\r\n			<dt> -p </dt> \r\n				<dd> Do not scroll.  Instead, clear the whole screen and then\r\n				display the text.  Notice that this option is switched on\r\n				automatically if the executable is named page. </dd> \r\n\r\n			<dt> -c </dt>\r\n				<dd> Do not scroll.  Instead, paint each screen from the top,\r\n          	clearing the remainder of each line as it is displayed.</dd>\r\n\r\n			<dt> -s	Squeeze multiple blank lines into one. </dt> \r\n				<dd style="visibility: hidden;"></dd>\r\n\r\n			<dt> -u Suppress underlining. </dt>\r\n				<dd style="visibility: hidden;"></dd>\r\n		</dl>\r\n	</dd>\r\n	\r\n	<dt>mv - move (rename) files </dt>\r\n		<dd> SYNOPSIS: <br/>\r\n		mv [OPTION]... [-T] SOURCE DEST <br/>\r\n		mv [OPTION]... SOURCE... DIRECTORY<br/>\r\n		mv [OPTION]... -t DIRECTORY SOURCE... <br/>\r\n		OPTIONS: <br/>\r\n		Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY. <br/> \r\n\r\n		Mandatory arguments to long options are mandatory for short options too. <br/> \r\n\r\n		<dl>\r\n			<dt> --backup[=CONTROL] </dt> \r\n				<dd> make a backup of each existing destination file </dd> \r\n			<dt> -b </dt> \r\n				<dd> like --backup but does not accept an argument </dd> \r\n			<dt> -f, --force </dt> \r\n				<dd> do not prompt before overwriting </dd> \r\n			<dt> -i, --interactive </dt> \r\n				<dd> prompt before overwrite </dd> \r\n			<dt> -n, --no-clobber</dt> \r\n				<dd> do not overwrite an existing file. <br/> \r\n\r\n			If you specify more than one of -i, -f, -n, only the final one takes effect.</dd> \r\n\r\n			<dt> --strip-trailing-slashes </dt>\r\n				<dd> remove any trailing slashes from each SOURCE argument </dd> \r\n			<dt> -S, --suffix=SUFFIX </dt> \r\n				<dd> override the usual backup suffix </dd> \r\n			<dt> -t, --target-directory=DIRECTORY </dt> \r\n				<dd> move all SOURCE arguments into DIRECTORY</dd> \r\n			<dt> -T, --no-target-directory </dt> \r\n				<dd> treat DEST as a normal file </dd> \r\n			<dt> -u, --update </dt> \r\n				<dd> move only when the SOURCE file is newer than the destination file or when the destination file is missing </dd> \r\n			<dt> -v, --verbose </dt> \r\n				<dd> explain what is being done </dd> \r\n			<dt> --help </dt>\r\n				<dd> display this help and exit </dd> \r\n			<dt> --version </dt> \r\n				<dd> output version information and exit </dd> \r\n		</dl> \r\n	</dd>\r\n	 <p class="h2 reflinks pink"> <a name ="p"> p </a></p> \r\n         <p class="backToTop h4"> <a href ="#top"> Top </a></p> 	 \r\n	<dt>pwd - print name of current/working directory </dt>\r\n		<dd> SYNOPSIS: <br/>\r\n		pwd [OPTION]...  <br/>\r\n		OPTIONS: <br/>\r\n		Print the full filename of the current working directory. <br/> \r\n	\r\n	<dl> \r\n		<dt> -L, --logical </dt>\r\n			<dd> use PWD from environment, even if it contains symlinks </dd> \r\n		<dt> -P, --physical </dt> \r\n			<dd> avoid all symlinks </dd> \r\n		<dt> --help</dt> \r\n			<dd> display this help and exit </dd> \r\n		<dt> --version </dt> \r\n			<dd> output version information and exit </dd> \r\n	</dl> \r\n	</dd>\r\n	\r\n         <p class="h2 reflinks pink"> <a name ="r"> r </a></p> \r\n         <p class="backToTop h4"> <a href ="#"> Top </a></p> 	\r\n	<dt>rm - remove files or directories</dt>\r\n		<dd> SYNOPSIS: <br/>\r\n		rm [OPTION]... FILE... <br/>\r\n		OPTIONS: <br/>Remove (unlink) the FILE(s). <br/> \r\n	\r\n	<dl> \r\n		<dt> -d, --directory </dt> \r\n          	<dd> unlink  FILE,  even  if  it is a non-empty directory (super-user only; this works only if your system supports ''unlink'' for nonempty directories) </dd> \r\n\r\n		<dt> -f, --force </dt> \r\n			  <dd> ignore nonexistent files, never prompt </dd> \r\n\r\n		<dt> -i, --interactive </dt> \r\n				<dd> prompt before any removal </dd> \r\n\r\n		<dt> --no-preserve-root do not treat ''/'' specially (the default) </dt> \r\n			<dd style="visibility: hidden;"></dd>\r\n\r\n		<dt> --preserve-root </dt> \r\n			  <dd> 	fail to operate recursively on ''/'' </dd> \r\n\r\n		<dt> -r, -R, --recursive </dt> \r\n			 <dd> remove the contents of directories recursively </dd> \r\n\r\n		<dt> -v, --verbose </dt> \r\n				<dd> explain what is being done </dd> \r\n\r\n		<dt> --help display this help and exit</dt> \r\n			<dd style="visibility: hidden;"></dd>\r\n	</dl>\r\n	\r\n	</dd>\r\n	\r\n	<dt>  rmdir - delete a directory </dt>\r\n		<dd> SYNOPSIS: <br/> rmdir [options]... folder(s)... <br/>\r\n			OPTIONS: <br/>\r\n	<dl> \r\n		<dt> --ignore-fail-on-non-empty </dt> \r\n             <dd> Ignore each failure that is solely because the directory is non-empty. </dd> \r\n\r\n		<dt> -p, --parents </dt> \r\n			<dd> Remove explicit parent directories if being emptied </dd> \r\n\r\n		<dt> --verbose </dt>\r\n			<dd> Output a diagnostic for every directory processed </dd> \r\n\r\n		<dt> --help  </dt>\r\n			<dd> Display help and exit </dd> \r\n\r\n		<dt> --version   Output version information and exit </dt>\r\n			<dd style="visibility: none;"></dd>\r\n	</dl>\r\n	</dd>\r\n         <p class="h2 reflinks pink"> <a name ="s"> s </a></p> \r\n         <p class="backToTop h4"> <a href ="#"> Top </a></p> 	\r\n	<dt>ssh - OpenSSH SSH client (remote login program) </dt>\r\n		<dd> SYNOPSIS: <br/>\r\n		ssh [-1246AaCfgkMNnqsTtVvXxY] [-b bind_address] [-c cipher_spec] <br/>\r\n     	[-D port] [-e escape_char] [-F configfile] [-i identity_file] [-L] <br/> \r\n     	[bind_address:]port:host:hostport] [-l login_name] [-m mac_spec] <br/> \r\n     	[-O ctl_cmd] [-o option] [-p port] <br/> \r\n	</dd>\r\n\r\n         <p class="h2 reflinks pink"> <a name ="v"> v </a></p> \r\n	 <p class="backToTop h4"> <a href ="#"> Top </a></p>  \r\n	<dt> vi - edit a file </dt>\r\n		<dd> SYNOPSIS: <br/> vim [options] [file ..]\r\n			vim [options] -\r\n			vim [options] -t tag\r\n			vim [options] -q [errorfile]\r\n			<br/>\r\n		OPTIONS: <br/>\r\n		\r\n	<dl>\r\n		<dt> +[num] </dt> \r\n			<dd> For the first file the cursor will be positioned on line "num". If "num" is missing, the cursor will be positioned on the last line. </dd> \r\n		<dt> +/{pat} </dt> \r\n			<dd> For the first file the cursor will be positioned on the first occurrence of {pat}. See ":help search-pattern" for the available search patterns. </dd> \r\n		<dt> +{command} </dt> \r\n		<dt> -c {command} </dt> \r\n			<dd> {command} will be executed after the first file has been read. {command} is interpreted as an Ex command. If the {command} contains spaces it must be enclosed in double quotes (this depends on the shell that is used). Example: Vim "+set si" main.c\r\n			Note: You can use up to 10 "+" or "-c" commands. </dd> \r\n		<dt> -S {file} </dt> \r\n			<dd> {file} will be sourced after the first file has been read. This is equivalent to -c "source {file}".\r\n			{file} cannot start with ''-''. If {file} is omitted "Session.vim" is used (only works when -S is the last argument). </dd> \r\n			\r\n	</dl>\r\n	</dd>\r\n	<dt> vi - edit a file </dt>\r\n		<dd> SYNOPSIS: <br/> vim [options] [file ..]\r\n			vim [options] - <br/> \r\n			vim [options] -t tag <br/> \r\n			vim [options] -q [errorfile] <br/>\r\n			OPTIONS: <br/>\r\n			\r\n		<dl> \r\n			<dt> +[num] </dt> \r\n				<dd> For the first file the cursor will be positioned on line "num". If "num" is missing, the cursor will be positioned on the last line. </dd> \r\n			<dt> +/{pat} </dt> \r\n				<dd> For the first file the cursor will be positioned on the first occurrence of {pat}. See ":help search-pattern" for the available search patterns. </dd> \r\n				\r\n			<dt> -c {command} </dt> \r\n				<dd> {command} will be executed after the first file has been read. {command} is interpreted as an Ex command. If the {command} contains spaces it must be enclosed in double quotes (this depends on the shell that is used). Example: Vim "+set si" main.c\r\n					Note: You can use up to 10 "+" or "-c" commands. </dd> \r\n			\r\n			<dt> -S {file} </dt> \r\n				<dd> {file} will be sourced after the first file has been read. This is equivalent to -c "source {file}". {file} cannot start with ''-''.\r\n				If {file} is omitted "Session.vim" is used (only works when -S is the last argument). </dd> \r\n				\r\n			<dt> --cmd {command} </dt> \r\n				<dd> Like using "-c", but the command is executed just before processing any vimrc file. You can use up to 10 of these commands, independently from "-c" commands. </dd> \r\n				\r\n			<dt> -A </dt> \r\n				<dd> If Vim has been compiled with ARABIC support for editing right-to-left oriented files and Arabic keyboard mapping, this option starts Vim in Arabic mode,\r\n				i.e. ''arabic'' is set. Otherwise an error message is given and Vim aborts. </dd> \r\n				\r\n			<dt> -b </dt> \r\n				<dd> Binary mode. A few options will be set that makes it possible to edit a binary or executable file. </dd> \r\n					\r\n			<dt> -C </dt> \r\n				<dd> Compatible. Set the ''compatible'' option. This will make Vim behave mostly like Vi, even though a .vimrc file exists. </dd> \r\n\r\n			<dt> -d </dt> \r\n				<dd> Start in diff mode. There should be two, three or four file name arguments. Vim will open all the files and show differences between them. Works like vimdiff(1). </dd> \r\n				\r\n			<dt> -d {device} </dt> \r\n				<dd> Open {device} for use as a terminal. Only on the Amiga. Example: "-d con:20/30/600/150". </dd> \r\n			\r\n			<dt> -D </dt> \r\n				<dd> Debugging. Go to debugging mode when executing the first command from a script. </dd> \r\n				\r\n			<dt> -e </dt> \r\n				<dd> Start Vim in Ex mode, just like the executable was called "ex". </dd> \r\n\r\n			<dt> -E </dt> \r\n				<dd> Start Vim in improved Ex mode, just like the executable was called "exim". </dd> \r\n				\r\n			<dt> -f </dt> \r\n				<dd> Foreground. For the GUI version, Vim will not fork and detach from the shell it was started in. \r\n				On the Amiga, Vim is not restarted to open a new window. This option should be used when Vim is executed by a program that will wait for the edit session to finish \r\n				(e.g. mail). On the Amiga the ":sh" and ":!" commands will not work. </dd> \r\n				\r\n			<dt> --nofork </dt> \r\n				<dd> Foreground. For the GUI version, Vim will not fork and detach from the shell it was started in. </dd> \r\n			\r\n			<dt> -F </dt> \r\n				<dd> If Vim has been compiled with FKMAP support for editing right-to-left oriented files and Farsi keyboard mapping, \r\n				this option starts Vim in Farsi mode, i.e. ''fkmap'' and ''rightleft'' are set. Otherwise an error message is given and Vim aborts. </dd> \r\n				\r\n			<dt> -g </dt>\r\n				<dd> If Vim has been compiled with GUI support, this option enables the GUI. If no GUI support was compiled in, an error message is given and Vim aborts. </dd> \r\n				\r\n			<dt> -h </dt> \r\n				<dd> Give a bit of help about the command line arguments and options. After this Vim exits. </dd> \r\n				\r\n			<dt> -H </dt> \r\n				<dd> If Vim has been compiled with RIGHTLEFT support for editing right-to-left oriented files and Hebrew keyboard mapping,\r\n				this option starts Vim in Hebrew mode, i.e. ''hkmap'' and ''rightleft'' are set. Otherwise an error message is given and Vim aborts. </dd> \r\n\r\n			<dt> -i {viminfo} </dt> \r\n				<dd> When using the viminfo file is enabled, this option sets the filename to use, \r\n				instead of the default "~/.viminfo". This can also be used to skip the use of the .viminfo file, by giving the name "NONE".</dd>\r\n\r\n			<dt> -L </dt>\r\n				<dd> Same as -r. </dd> \r\n			\r\n			<dt> -l </dt> \r\n				<dd> Lisp mode. Sets the ''lisp'' and ''showmatch'' options on. </dd> \r\n\r\n			<dt> -m </dt> \r\n				<dd> Modifying files is disabled. Resets the ''write'' option. You can still modify the buffer, but writing a file is not possible. </dd> \r\n				\r\n			<dt> -M </dt> \r\n				<dd> Modifications not allowed. The ''modifiable'' and ''write'' options will be unset,\r\n				so that changes are not allowed and files can not be written. Note that these options can be set to enable making modifications. </dd> \r\n				\r\n			<dt> -N </dt> \r\n				<dd> No-compatible mode. Reset the ''compatible'' option. This will make Vim behave a bit better, but less Vi compatible, even though a .vimrc file does not exist. </dd> \r\n			\r\n			<dt> -n </dt> \r\n				<dd> No swap file will be used. Recovery after a crash will be impossible.\r\n				Handy if you want to edit a file on a very slow medium (e.g. floppy). Can also be done with ":set uc=0". Can be undone with ":set uc=200". </dd> \r\n				\r\n			<dt> -nb </dt> \r\n				<dd> Become an editor server for NetBeans. See the docs for details. </dd> \r\n				\r\n			<dt> -o[N] </dt> \r\n				<dd> Open N windows stacked. When N is omitted, open one window for each file. </dd> \r\n				\r\n			<dt> -O[N] </dt> \r\n				<dd> Open N windows side by side. When N is omitted, open one window for each file.</dd>\r\n				\r\n			<dt> -p[N] </dt> \r\n				<dd> Open N tab pages. When N is omitted, open one tab page for each file. </dd> \r\n			\r\n			<dt> -R </dt> \r\n				<dd> Read-only mode. The ''readonly'' option will be set. You can still edit the buffer, \r\n				but will be prevented from accidently overwriting a file. If you do want to overwrite a file, \r\n				add an exclamation mark to the Ex command, as in ":w!". The -R option also implies the -n option (see below).\r\n				The ''readonly'' option can be reset with ":set noro". See ":help ''readonly''". </dd> \r\n				\r\n			<dt> -r </dt> \r\n				<dd> List swap files, with information about using them for recovery. </dd> \r\n				\r\n			<dt> -r {file}</dt> \r\n				<dd> Recovery mode. The swap file is used to recover a crashed editing session. \r\n				The swap file is a file with the same filename as the text file with ".swp" appended. See ":help recovery". </dd> \r\n				\r\n			<dt> -s </dt> \r\n				<dd> Silent mode. Only when started as "Ex" or when the "-e" option was given before the "-s" option. </dd> \r\n				\r\n			<dt> -s {scriptin} </dt> \r\n				<dd> The script file {scriptin} is read. The characters in the file are interpreted as if you had typed them.\r\n				The same can be done with the command ":source! {scriptin}". If the end of the file is reached before the editor exits, further characters are read from the keyboard. </dd> \r\n				\r\n			<dt> -T {terminal} </dt> \r\n				<dd> Tells Vim the name of the terminal you are using. Only required when the automatic way doesn''t work. \r\n				Should be a terminal known to Vim (builtin) or defined in the termcap or terminfo file. </dd> \r\n				\r\n			<dt> -u {vimrc} </dt> \r\n				<dd> Use the commands in the file {vimrc} for initializations. All the other initializations are skipped.\r\n				Use this to edit a special kind of files. It can also be used to skip all initializations by giving the name "NONE". See ":help initialization" within vim for more details. </dd> \r\n				\r\n			<dt> -U {gvimrc} </dt> \r\n				<dd> Use the commands in the file {gvimrc} for GUI initializations. All the other GUI initializations are skipped.\r\n				It can also be used to skip all GUI initializations by giving the name "NONE". See ":help gui-init" within vim for more details. </dd> \r\n				\r\n			<dt> -V[N] </dt> \r\n				<dd> Verbose. Give messages about which files are sourced and for reading and writing a viminfo file. The optional number N is the value for ''verbose''. Default is 10. </dd> \r\n				\r\n			<dt> -v </dt> \r\n				<dd> Start Vim in Vi mode, just like the executable was called "vi". This only has effect when the executable is called "ex". </dd> \r\n				\r\n			<dt> -w {scriptout} </dt> \r\n				<dd> All the characters that you type are recorded in the file {scriptout}, until you exit Vim. \r\n				This is useful if you want to create a script file to be used with "vim -s" or ":source!". If the {scriptout} file exists, characters are appended. </dd> \r\n				\r\n			<dt> -W {scriptout} </dt> \r\n				<dd> Like -w, but an existing file is overwritten. </dd> \r\n			\r\n			<dt> -x </dt> \r\n				<dd> Use encryption when writing files. Will prompt for a crypt key. </dd> \r\n				\r\n			<dt> -X </dt> \r\n				<dd> Don''t connect to the X server. Shortens startup time in a terminal, but the window title and clipboard will not be used. </dd> \r\n				\r\n			<dt> -y </dt> \r\n				<dd> Start Vim in easy mode, just like the executable was called "evim" or "eview". Makes Vim behave like a click-and-type editor. </dd> \r\n				\r\n			<dt> -Z </dt> \r\n				<dd> Restricted mode. Works like the executable starts with "r". </dd>\r\n		</dl>\r\n</dd>\r\n</dl>\r\n\r\n<p class="backToTop h4"> <a href ="#"> Top </a></p> \r\n'),
(3, 'resources', '<h2 class="reflinks pink"> Home </h2>\r\n<h3 style="color:#66D9EF;"> Tips Of The Day: </h3>\r\n<a href="https://www.pcsteps.com/5010-basic-linux-commands-terminal/">https://www.pcsteps.com/5010-basic-linux-commands-terminal/</a><br/>\r\n\r\n<h2 class="reflinks pink"> Tutorials </h2>\r\n<h3 style="color:#66D9EF;"> SCP : </h3>\r\n<a href="http://www.computerhope.com/unix/scp.htm">http://www.computerhope.com/unix/scp.htm</a>\r\n<h3 style="color:#66D9EF;"> Grep and Find: </h3>\r\n<a href="https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/">https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/</a><br/>\r\n<a href="https://www.linode.com/docs/tools-reference/tools/find-files-in-linux-using-the-command-line">https://www.linode.com/docs/tools-reference/tools/find-files-in-linux-using-the-command-line</a><br/>\r\n<h3 style="color:#66D9EF;"> Deletion:</h3>\r\n<a href="https://www.cyberciti.biz/faq/howto-linux-unix-delete-remove-file/">https://www.cyberciti.biz/faq/howto-linux-unix-delete-remove-file/</a><br/>\r\n<h3 style="color:#66D9EF;"> Vi:</h3>\r\n<a href="https://www.washington.edu/computing/unix/vi.html">https://www.washington.edu/computing/unix/vi.html</a><br/>\r\n<h3 style="color:#66D9EF;">Man help:</h3>\r\n<a href="https://kb.iu.edu/d/afjm">https://kb.iu.edu/d/afjm</a><br/>\r\n<h3 style="color:#66D9EF;"> Ls mkdir & intro:</h3>\r\n<a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unix5.html">http://www.ee.surrey.ac.uk/Teaching/Unix/unix5.html</a><br/>\r\n<h3 style="color:#66D9EF;">Quiz template:</h3>\r\n<a href="https://codepen.io/harrysadlermusic/pen/DihjK">https://codepen.io/harrysadlermusic/pen/DihjK</a>\r\n\r\n<h2 class="reflinks pink"> Glossary </h2>\r\n<h3 style="color:#66D9EF;"> Linux Man Pages:</h3>\r\n<a href="http://man.he.net/">http://man.he.net/</a><br/>\r\n\r\n<h2 class="reflinks pink"> Contact </h2> \r\n<h3 style="color:#66D9EF;"> All information provided in the ''Contact'' page is original </h3>');

-- --------------------------------------------------------

--
-- Table structure for table `tips`
--

CREATE TABLE IF NOT EXISTS `tips` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tip` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=13 ;

--
-- Dumping data for table `tips`
--

INSERT INTO `tips` (`id`, `tip`) VALUES
(1, 'It is important to remember that everything written in the terminal is case-sensitive. When the command is "sudo", neither "Sudo", "SUDO", nor "sUdO" will work.'),
(2, 'Pressing the Up keyboard key in the terminal will cycle through the last Linux commands successfully used, in order. No failed commands will show here!'),
(3, 'When are asked for your password in the terminal, nothing will show on screen as you type. (No stars, dots, or anything!) Just type the password and press Enter.'),
(4, 'The Tab button on the keyboard is a huge time saver - it will automatically fill in the names of files and directories while you type a command. Try it!'),
(5, 'To copy or paste on the terminal, Ctrl+C and Ctrl+V won''t work. Instead, use Ctrl+Shift+C and Ctrl+Shift+V or right click and use the commands from the context menu'),
(6, 'Need help or an example on how to use a command? man [command] will show the command''s manual, which is an extended version of the --help output.'),
(7, 'Good news: you don''t have to memorize anything when it comes to the terminal. Using the apropos command, you can quickly figure out which commands lead to the actions you want to perform. Next time you''re stuck, type apropos followed by what you want the command to do. The output results in all of the commands that have your desired action included in the help string.'),
(8, 'Ctrl+A: Moves the cursor to the start of the line in your terminal.'),
(9, 'Ctrl+E: Moves the cursor to the end of the line in your terminal.'),
(10, 'If ever told to perform a rm -rf / do not continue! This line executes the remove command rm with two toggles: -r which forces recursive deletion through all subdirectories and -f which forces deletion of read-only files without confirmation. The command is executed on the / root directory, essentially wiping your whole system clean.'),
(11, 'Pipe the output of any text into "rev" and it will reverse the text. "fortune | rev" gives you a fortune. In reverse. Which is, as odd as it may seem, not a misfortune.'),
(12, 'If you are not used to using commands such cd, cp, mv, and rm then you can use the midnight command. It is an easy to use visual shell in which you can also use mouse. The midnight command is actually called "mc". To install mc on your system simply run: a sudo-apt-get install mc or yum-install mc. Type mc to run. ');

-- --------------------------------------------------------

--
-- Table structure for table `tutorials`
--

CREATE TABLE IF NOT EXISTS `tutorials` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tutorial` varchar(50) NOT NULL,
  `title` varchar(50) NOT NULL,
  `content` longtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=87 ;

--
-- Dumping data for table `tutorials`
--

INSERT INTO `tutorials` (`id`, `tutorial`, `title`, `content`) VALUES
(1, 'intro1.1', 'Intro 1.1', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''><h2>Introduction </h2> </div>\r\n<p> Hi there! Welcome to the beginning of your UNIX Tutorial!</p>\r\n\r\n<img src="../assets/images/tutorials/0.png" alt="intro">\r\n\r\n<p>We know the thought of using a UNIX command line can be kind of intimidating, especially if you''re used to working primarily in Microsoft Windows or other user-friendly graphical interfaces.</p>\r\n\r\n<p>Not to worry though, this tutorial will take you through opening, getting comfortable with, and working in the UNIX command line. Before you know it, you''ll see just how easy it is to work in a terminal, and you may just prefer it over a typical graphical user interface! Anyways, let''s get started! \r\n</p>\r\n\r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(2, 'whatsunix1.1', 'What''s Unix 1.1', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''>\r\n<h2>What is UNIX? </h2>\r\n\r\n</div>\r\n\r\n<p>So first, it''s important to discuss what UNIX is in the first place.</p> \r\n\r\n<p>First written in the 1960''s, UNIX is a type of operating system just like Microsoft of Mac OSX. Just in case you were unfamiliar to what an operating system is, an operating system (OS) is just a suite of programs installed on a computer that allow the user to interface with the physical computer and perform desired tasks. \r\n</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(3, 'whatsunix1.2', 'What''s Unix 1.2', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''><h2>What is UNIX? continued </h2> </div>\r\n\r\n<p> Just like a Windows 7 machine you might have at home, work, or school,  the UNIX operating system has a graphical interface that lets the users interact with the machine through keyboard and mouse clicks. \r\n</p>\r\n<p> However, knowledge of the UNIX command line is crucial to perform operations that aren''t possible through the graphical user interface, like a telnet session from one device to another. </p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(4, 'whatsunix1.3', 'What''s Unix 1.3', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''>\r\n\r\n<h2>What is a Terminal?</h2>\r\n\r\n</div>\r\n\r\n<p>Now that we''ve explained what UNIX is, we should probably explain how the system really works before we get to the terminal.</p>\r\n\r\n<p>The UNIX operating system is made up of three parts:</p>\r\n\r\n<ul>\r\n<li>The kernel</li>\r\n<li>The shell</li> \r\n<li>The programs</li>\r\n</ul>\r\n\r\n<p>For this tutorial, we are not too concerned with the kernel and will be focusing more on the shell.</p>\r\n\r\n<p>The shell acts as an interface between the user and the kernel (operating system). It acts as  a command line interpreter (CLI),  interpreting the commands the user types in and arranges for them to be carried out.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>\r\n'),
(5, 'whatsunix1.4', 'What''s Unix 1.4', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''><h2>Files vs. Processes</h2> </div>\r\n\r\n<p>Everything in UNIX is either a file or a process.</p>\r\n\r\n<p>A file is a collection of data, like a document, directory, configuration file, or program text. These files are created by users using text editors, compilers, or the operating system upon installation.</p>\r\n\r\n<p>That being said, a process is just an action of program files being executing that ultimately perform an action. An example of a process would be starting a text editor or opening a browser.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(7, 'filestructure1.1', 'File Structure 1.1', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>UNIX File Hierarchy</h2>\r\n\r\n</div>\r\n\r\n<p>So before we start typing commands just yet, we should make a quick mention about the file system hierarchy in UNIX.</p>\r\n\r\n<p>On UNIX systems, all the files in the system are grouped together in the directory structure. The file-system is arranged in a hierarchical structure, like an inverted tree.</p>\r\n\r\n<p>The top of the hierarchy is traditionally called root (written as a slash / )</p>\r\n<img src="../assets/images/tutorials/bash.jpg" alt="intro">\r\n<div class="terminal">\r\n<p>Try it yourself in the terminal below!</p>\r\n<iframe src="http://cb.vu/" style="width: 100%; height:auto;"></iframe>\r\n</div>\r\n<p> The linux file system is very deep and extensive, so for now, we will just introduce you to the top-level hierarchy above. </p>\r\n<a style="cursor:pointer;" class="buttons pink" id="commandquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(6, 'terminal1.1', 'Terminal 1.1', '<h2>Introduction to UNIX & Terminal</h2>\r\n<div class=''reflinks blue''><h2>Opening the Terminal </h2> </div>\r\n\r\n<p>So now that you''re a UNIX expert, it''s time to open the terminal!</p>\r\n\r\n<p>To open a UNIX terminal window, click on the "Terminal" icon from the Applications/Accessories menu along the top of your screen.</p>\r\n\r\n<div class="terminal">\r\n<p>Throughout this tutorial, on larger browser versions, you can use this terminal to practice commands. </p>\r\n<iframe src="http://cb.vu/" style="width: 100%; height:auto;"></iframe>\r\n</div>\r\n<p>Once clicked, a UNIX Terminal window will  appear with a prompt. </p>\r\n<img src="../assets/images/tutorials/0.1.png" alt="prompt">\r\n<p>It won''t do anything - it''s waiting for you to enter commands! So let''s get started with your first command!</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons blue" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n\r\n'),
(27, 'find1.1', 'Find 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''><h2>''find'' Files</h2> </div>\r\n\r\n<p>\r\nAlternatively, imagine you''ve been working on a huge, one-hundred page website with some co-workers over the last month, and you need to quickly find a specific file to edit. Thankfully, UNIX has a command called find that can locate a specific file by name or extension.</p>\r\n<p>\r\nWe won''t get too into the find command, but try using it to find the file you just edited. In your terminal window, type find . -name followed by the name of the file you created in quotes. </p>\r\n\r\n<img src="../assets/images/tutorials/21.png" alt="find">\r\n\r\n<p> Now you have the location on the system where the file is located. Remember, the period means current directory. </p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(8, 'terminal2.1', 'Terminal 2.1', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Print Working Directory</h2>\r\n\r\n</div>\r\n\r\n<p>It''s time to type your first command!</p>\r\n\r\n<p>When you first login to a terminal, you are placed in your current working directory. This is known as your home directory.</p>\r\n\r\n<p>Your home directory has the same name as your user-name and it is where your personal files and subdirectories are saved.</p>\r\n\r\n\r\n<p>To see the location of your home directory, type pwd in the terminal window prompt. </p>\r\n<img src="../assets/images/tutorials/1.png" alt="pwd">\r\n<p> This command stands for print working directory, and it shows you the current directory you reside within the terminal.</p>\r\n\r\n<div class="terminal">\r\n<p>Try it yourself in the terminal below!</p>\r\n<iframe src="http://cb.vu/" style="width: 100%; height:auto;"></iframe>\r\n</div>\r\n\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons pink" id="commandquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>\r\n'),
(9, 'introcommands1.1', 'Intro Commands 1.1', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Listing Public and Hidden Files</h2>\r\n\r\n</div>\r\n\r\n<p>Curious about what''s inside this directory? Type ls . The ls command ( lowercase L and lowercase S ) lists the contents of your current working directory.</p>\r\n<img src="../assets/images/tutorials/2.png" alt="ls">\r\n\r\n<p>In the case that no files exist in your current working directory, you will be returned to a prompt after entering the command. \r\n\r\n<p>But don''t let the command fool you: ls does not cause all the files in your home directory to be listed, but only the ones whose name does not begin with a dot (.)</p>\r\n\r\n<p>Files beginning with a dot (.) are known as hidden files and usually contain important program configuration information.</p>\r\n<img src="../assets/images/tutorials/3.png" alt="lsall">\r\n<p>To see all of the files in the working directory, including the hidden files, type ls -a</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons pink" id="commandquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(10, 'introcommands1.2', 'Intro Commands 1.2', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Making a Directory (or Folder)</h2>\r\n\r\n</div>\r\n\r\n<p>How exciting! You''ve explored the current working directory and you''ve seen all there is to see.</p>\r\n\r\n<p>Why not try creating a new directory in the current working directory so that you can explore that one too? To do this, type  mkdir followed by the name of the directory you''d like to create.</p>\r\n\r\n<img src="../assets/images/tutorials/4.png" alt="mkdir">\r\n\r\n<p>If you entered the command and nothing happened, that''s great news! The UNIX command line actually rarely notifies the user when a command executed successfully.</p>\r\n\r\n<p>In the UNIX world, no prompt is good news, and we can assume the command was successful.</p>\r\n\r\n<p>To prove this, now perform another ls -a</p>\r\n<img src="../assets/images/tutorials/5.png" alt="lsall2">\r\n\r\n<p>Do you see your new directory in there? If you do not, try the mkdir command again until you see your new directory.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons pink" id="commandquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(11, 'introcommands1.3', 'Intro Commands 1.3', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Changing Directories</h2>\r\n\r\n</div>\r\n\r\n<p>Now that you have a shiny new directory, why not try changing that directory to your current working directory and seeing what''s inside? Type the command cd followed by the name of the directory you just created. \r\n</p>\r\n<img src="../assets/images/tutorials/6.png" alt="mk">\r\n\r\n<p>To confirm you are now working in this new directory, type pwd</p>\r\n\r\n<p>Fantastic! Now let''s learn more about how to navigate through the file system.</p>\r\n\r\n<p>So you''ve just stepped forward into a new directory, inside your home directory. Let''s step back into the home directory and make that your new current working directory.</p>\r\n\r\n<p>Type cd followed by two periods - cd ..</p>\r\n\r\n<p>Type pwd to see your working directory. Are you back at your home directory?</p>\r\n\r\n<img src="../assets/images/tutorials/7.png" alt="pwd">\r\n\r\n<p>Typing two periods after the cd command always changes your current working directory to the parent directory of the current directory you are in. That being said, typing just one period after the cd command will just change you back to the current directory you are already in.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons pink" id="introquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(12, 'introcommands1.4', 'Intro Commands 1.4', '<h2>Navigating the Command Line</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Removing Directories</h2>\r\n\r\n</div>\r\n\r\n<p>Since we don''t know too much about UNIX commands just yet, we can get rid of that new directory we just created.</p>\r\n\r\n<p>Make sure you are in your home directory by typing pwd .</p>\r\n\r\n<p>If you are not in your home directory, type a tilde (~) in your terminal window. This command will always take you back to the home directory of the current user.</p>\r\n\r\n<p>Alright, now that we''re here, type rmdir in your terminal window, followed by the name of the directory you just created to delete it.</p>\r\n\r\n<img src="../assets/images/tutorials/8.png" alt="pwd">\r\n\r\n<p>Remember, no message is a message that your command was most-likely successful! To verify, use the ls command. The directory should be gone now.</p>\r\n\r\n<img src="../assets/images/tutorials/9.png" alt="pwd">\r\n\r\n<p>Now that you''re familiar with some of the basic commands, let''s move on to some more commands in Tutorial 3.</p>\r\n\r\n<a style="cursor:pointer;" class="buttons pink" id="commandquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n'),
(13, 'help1.1', 'Help 1.1', '<h2>Displaying Help Information</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Introduction to the Man Pages </h2>\r\n\r\n</div>\r\n\r\n<p>There are what seems like millions of different UNIX commands, especially different types of commands for varying types of systems. But for now, let''s just discuss the commands we already know:</p>\r\n\r\n<ul>\r\n<li>ls</li>\r\n<li>pwd</li>\r\n<li>cd</li>\r\n<li>mkdir</li>\r\n<li>rmdir</li>\r\n</ul>\r\n\r\n<p>We''ve taught you the basic ways to use these commands, but they certainly aren''t the only way to use them.</p>\r\n\r\n<p>Curious about the different ways a command could be used? Welcome to the man pages!</p>\r\n\r\n<img src="../assets/images/tutorials/10.png" alt="man">\r\n\r\n<p>Short for ''manual'' pages, the man pages are just pages of documentation for commands in UNIX-based systems, and any UNIX user can tell you that you will become best friends with the man pages.</p>\r\n<a style="cursor:pointer;" class="buttons green" id="helpquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(14, 'help1.2', 'Help 1.2', '<h2>Displaying Help Information</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Using ''man''</h2>\r\n\r\n</div>\r\n\r\n<p>Try it out! Type man ls.</p>\r\n<img src="../assets/images/tutorials/11.png" alt="man">\r\n<p>Don''t panic! You can probably see that the manual page takes up your entire terminal window. That''s completely normal.</p>\r\n\r\n<p>To look through the manual pages on the command, use the space-bar to advance forward in the manual. You can see the synopsis, description, options for the command, and even usage examples.</p>\r\n\r\n<p>When finished, type the letter q.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons green" id="helpquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>\r\n'),
(15, 'help1.3', 'Help 1.3', '<h2>Displaying Help Information</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Using ''man'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>The data in the man pages can be quite overwhelming.</p>\r\n\r\n<p>By default, man uses the command ''less'' to output text so you can scroll through multiple pages. To see the entire manual for the command, try the man page again, but this time, type man ls | more.</p>\r\n\r\n<img src="../assets/images/tutorials/12.png" alt="man">\r\n\r\n<p>The  | line is known as a pipe in UNIX, and it just means that we are telling the terminal that we want to join two commands. In this case, we just told the kernel that we want to look at the manual page for the ls command, and display the information using the ''more'' keyword, rather than ''less.''</p>\r\n\r\n<p>Great Job! You''ve made it through the first three tutorials. Now let''s move on to File Management in Tutorial 4.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons green" id="helpquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n'),
(16, 'createfile1.1', 'Create File 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Creating a File</h2>\r\n\r\n</div>\r\n\r\n<p>Now you know how to use some basic UNIX commands and look at the manual for UNIX commands that you may not know much about.</p>\r\n\r\n<p>Great! Now let''s move on to how to create your very first file in the terminal.</p>\r\n\r\n<p>The easiest way to create a file in UNIX is to type the word touch in the terminal prompt, followed by the name of a file.</p>\r\n\r\n<p>For this example, type touch newfile.txt.</p>\r\n\r\n<p> To check and see if the file got created in the current directory, perform an ls on the current working directory.</p>\r\n<img src="../assets/images/tutorials/13.png" alt="touch">\r\n<p>Is the file there?</p>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(17, 'editfile1.1', 'Edit File 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Editing a File - Intro to ''vi''</h2>\r\n\r\n</div>\r\n\r\n<p>Congratulations! You created a file, all by typing one command.</p>\r\n\r\n<p>But you may be curious, how do we edit the file?</p>\r\n\r\n<p>Well, I introduce you to your new friend, Vi. Vi (sometimes known as Vim) is a common UNIX file editor used by many UNIX command-line users.</p>\r\n\r\n<img src="../assets/images/tutorials/14.png" alt="vi">\r\n<p>To edit the file you just created. Type vi followed by the filename of the file you just created.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> \r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(18, 'editfile1.2', 'Edit File 1.2', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Editing a File - Intro to ''vi'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>This is where it can be tricky at first.</p>\r\n\r\n<p>Remember, UNIX command line is great because it requires absolutely no use of your mouse. Vi is no exception.</p>\r\n\r\n<img src="../assets/images/tutorials/15.png" alt="vi"> \r\n\r\n<p>If you went ahead a bit and tried typing in the terminal window after running Vi, you might notice that you can''t actually type in the window, and you''d be correct.</p>\r\n\r\n<p>Vi has two modes, insert and command mode. By default, when started, Vi opens in command mode.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(19, 'editfile1.3', 'Edit File 1.3', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Editing a File - Intro to ''vi'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>In command mode, the letters of the keyboard perform editing functions (like moving the cursor, deleting text, etc.). To enter command mode, press the escape <Esc> key.</p>\r\n\r\n<p>In order to begin entering text in your new empty file, you must change from command mode to insert mode. To do this, type the letter ''i'' in your terminal.</p>\r\n\r\n<img src="../assets/images/tutorials/16.png" alt="man">\r\n\r\n<p>You will see the bottom of your terminal change to --insert-- mode. This means you can now freely type and edit the file.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(20, 'editfile1.4', 'Edit File 1.4', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Editing a File - Intro to ''vi'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>You may notice that editing is a bit more complicated, and you can''t just click on the location you want to edit like a normal text editor.</p>\r\n\r\n<p>To move the cursor to another position, you must be in command mode. If you have just finished typing text, you are still in insert mode.</p>\r\n\r\n<p>Go back to command mode by pressing the escape key on your keyboard. If you are not sure which mode you are in, press the escape key once or twice until you hear a beep. When you hear the beep, you are in command mode.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(21, 'editfile1.5', 'Edit File 1.5', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''><h2>Editing a File - Intro to ''vi'' continued</h2> </div>\r\n<p>There are hundreds of commands that Vi uses, but we will just introduce you to the ones necessary for file creation and modification. So, for starters The cursor is controlled with four keys: h, j, k, l.\r\n</p>\r\n<ul>\r\n<li>Key        Cursor Movement</li>\r\n<li>---        ---------------</li>\r\n<li> h         left one space </li>\r\n<li> j         down one line</li>\r\n<li> k          up one line </li>\r\n<li> l        right one space </li>\r\n</ul><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(22, 'editfile1.6', 'Edit File 1.6', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Editing a File - Intro to ''vi'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>The vi editor editor is built on an earlier Unix text editor called ex. ex commands can be used within vi. ex commands begin with a : (colon) and end with a tap on the enter key.</p>\r\n\r\n<p>Let''s get out of your file. To save the edits you have made, Press <Esc>.\r\nType :wq and press enter. You should be returned back to the terminal prompt.</p>\r\n<p>If you do not want to save your file, Press <Esc>, type :q! and press enter.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(23, 'editfile1.7', 'Edit File 1.7', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Viewing File Contents</h2>\r\n\r\n</div>\r\n\r\n<p>If you chose to make changes to your new file, let''s verify those changes have been made.</p>\r\n\r\n<p>To view the contents of a file without physically opening it back up in the Vi editor, use the cat command. Try the cat command by typing the word cat followed by the filename you just created and edited.</p>\r\n<img src="../assets/images/tutorials/17.png" alt="cat">\r\n<p>The contents of your file should display for you if you are in the same directory as the file.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(24, 'copyfile1.1', 'Copy File 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Copying Files</h2>\r\n\r\n</div>\r\n\r\n<p>Let''s make a copy of this file for future use.</p>\r\n\r\n<p>Thankfully, the cp command makes this easy to do.</p>\r\n\r\n<p>To copy your file, type cp in the terminal window, followed by the name of the file you want to copy, a space, and the name of the copy you''d like to create. </p>\r\n<img src="../assets/images/tutorials/18.png" alt="copy">\r\n<p>This will create a copy of the file with the new name in the current working directory by default.</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(25, 'copyfile1.2', 'Copy File 1.2', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Copying Files continued</h2>\r\n\r\n</div>\r\n\r\n<p>Just a tip, if you''d like to create a copy of a file and place it in another directory, create a new directory in your home directory and call it test. (Hint: use the mkdir command!) Now, copy the file to the new directory like this: cp filename test/filename</p>\r\n\r\n<img src="../assets/images/tutorials/19.png" alt="man">\r\n\r\n<p>The file will now be copied to the directory ''test'' with the new file name specified.</p>\r\n\r\n<p>Test it out by moving to the test directory and listing the contents (Hint: remember the cd and ls commands?)</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(26, 'grep1.1', 'Grep 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Using ''grep'' to locate</h2>\r\n\r\n</div>\r\n\r\n<p>So imagine you have a html file filled with hundreds of lines of awesome code. Your manager has just asked you to show him one of your lines of code that make your website function a specific way.</p>\r\n\r\n<p>Instead of scrolling through the file using the cat command, you can use a command called grep.</p>\r\n\r\n<p>To search for a word in a file, think of a word you typed into that new file while working in Vi. Now search for this line in the file!</p>\r\n\r\n<p>To do this, type grep followed by the word and then the filename. </p>\r\n<img src="../assets/images/tutorials/20.png" alt="grep">\r\n<p>Check that out!</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(28, 'delete1.1', 'Delete 1.1', '<h2>Basic File Management</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Deleting Files</h2>\r\n\r\n</div>\r\n\r\n<p>Alright, we won''t need this file anymore so let''s delete it.</p>\r\n\r\nTo delete a file in UNIX, the command rm is used. To delete your file, type rm followed by the filename in your terminal window.</p>\r\n\r\n<img src="../assets/images/tutorials/22.png" alt="rm">\r\n\r\n<p>Perform an ls on the current working directory to verify the file has been deleted.</p>\r\n\r\n<p>Although we don''t have many files or directories just yet, it should be noted that the ''rm'' command does not delete recursive files or directories, especially if they are empty.</p>\r\n\r\n<p>Typically, to delete a directory, the directory must be empty first. To get around that, the command rm -rf (r meaning recursively, and f meaning force) followed by the directory name to be erased, is used.</p>\r\n\r\n<img src="../assets/images/tutorials/23.png" alt="rmrf">\r\n\r\n<p>Congratulations! You have successfully completed the File Management section of the tutorial! Let''s move on to controlling files using file permissions in Tutorial 5. </p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filemanagementquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>'),
(29, 'filepermissions1.1', 'File Permissions 1.1', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Introduction to File Permissions</h2>\r\n\r\n</div>\r\n\r\n<p>Awesome! Now we know how to create a file, edit it, search it, find it, copy it, and delete it. But you probably didn''t even realize that we haven''t covered one really important thing- file permissions.</p>\r\n\r\n<p>In the world of web development, proper file and directory permission assignment is crucial for secure and properly functioning websites.</p>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(30, 'filepermissions1.2', 'File Permissions 1.2', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Introduction to File Permissions continued</h2>\r\n\r\n</div>\r\n\r\n<p>There are many different ways to modify file and directory permissions, but we will cover the most common way to do so through the command line.</p>\r\n\r\n<img src="../assets/images/tutorials/24.png" alt="perm">\r\n\r\n<p>First, before we explain how to change file permissions, it''s important to understand what file and directory permissions are assigned and how to read a terminal output of these permissions.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(31, 'viewpermissions1.1', 'View Permissions 1.1', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Viewing File Permissions</h2>\r\n\r\n</div>\r\n\r\n<p>To view the file permissions of the file, type ls -la in your terminal window. This provides a long listing of all the files in the directory, including hidden files.</p>\r\n<img src="../assets/images/tutorials/24.png" alt="lsl">\r\n<p>I ran an ls -l on my server. Let me explain what these fields mean.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> <a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(32, 'viewpermissions1.2', 'View Permissions 1.2', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Viewing File Permissions continued</h2>\r\n\r\n</div>\r\n<img src="../assets/images/tutorials/25.png" alt="perm">\r\n<p>The first thing seen is -rw------- . These are the file permission attributes.</p>\r\n\r\n<p>Each three dashes represents the permissions of a group of users, displayed as a rwx for read, write and execute.</p>\r\n\r\n<p>The first three dashes represent the permissions of the creator, the second three represent the permissions for the group members of the creator''s group, and the last three dashes represent the permissions of everyone else on the system.</p>\r\n\r\n<p>As you can see in this example, only the creator has read and write permissions, while the group of the creator has read permissions, as well as everyone else on the system</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(33, 'viewpermissions1.3', 'View Permissions 1.3', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Viewing File Permissions continued</h2>\r\n\r\n</div>\r\n\r\n<p>Following the permissions, the number stands for the  link count. This tells total number of references to the file as happens in case of shortcuts or symbolic links.</p>\r\n\r\n<img src="../assets/images/tutorials/25.png" alt="man">\r\n\r\n<p>The first word following the link count is the user who owns the file.</p>\r\n\r\n<p>The second word following the first, is the name of the group of the user who created the file belongs to.</p>\r\n\r\n<p>Following that, you see a number. This number represents the numeric values of the file permissions in the first item of the output. Each permission value is assigned a number, R  = 4, W = 2, X = 1.</p>\r\n\r\n<p>All three permissions totals 7. For each group, the number of permissions assigned can be totaled.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(34, 'addpermissions1.1', 'Add Permissions 1.1', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Adding File Permissions</h2>\r\n\r\n</div>\r\n\r\n<p>Following the numeric permissions are the last date and time of modification and the name of the file itself.</p>\r\n\r\n<p>So, let''s change some permissions!</p>\r\n\r\n\r\n<p>Let''s give everyone read, write, and execute access to the file you made a copy of. Navigate to that directory of that file. Using the chmod command, change the permissions of the file.</p>\r\n\r\n<img src="../assets/images/tutorials/26.png" alt="chmod1">\r\n<p>This can be done by typing chmod 777 followed by the file name into your terminal window. 777 is a total of all three permissions, read, write, and execute, for the creator (the first 7), the creator''s primary group (second 7) and everyone else (the final 7).</p>\r\n<a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(35, 'removepermissions1.1', 'Remove Permissions 1.1', '<h2>File Permissions</h2>\r\n<div class=''reflinks orange''>\r\n\r\n<h2>Removing File Permissions</h2>\r\n\r\n</div>\r\n\r\n<p>Try removing these permissions now.</p>\r\n\r\n<p>Perform a chmod 400 on the file you created.</p>\r\n\r\n<p>Now perform a ls -l on the directory where the file exists. What are the permissions looking like now? What does this mean? Who can do what with the file? Ask yourself these questions.</p>\r\n<img src="../assets/images/tutorials/27.png" alt="chmod2">\r\n<p>You now know how to modify file permissions, just using the UNIX terminal! Not so bad, huh?</p>\r\n\r\n<p>In Tutorial 6 you will learn how to log in to remote devices.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons orange" id="filepermissionsquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>'),
(36, 'ssh1.1', 'SSH 1.1', '<h2>Logging In To Remote Devices</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Introduction to SSH</h2>\r\n\r\n</div>\r\n\r\n<p>Before beginning this tutorial, it''s important to acknowledge that this tutorial isn''t going to cover how to install SSH, but will cover how to use it for a variety of tasks.</p>\r\n\r\n<p>Consult the instruction manual for your version of UNIX to understand how to fully install SSH if it has not already been done on the remote machine for you.</p>\r\n<a style="cursor:pointer;" class="buttons green" id="sshquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(37, 'ssh1.2', 'SSH 1.2', '<h2>Logging In To Remote Devices</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Introduction to SSH continued</h2>\r\n\r\n</div>\r\n\r\n<p>The first thing we''ll do is simply connect to a remote machine.</p>\r\n\r\n<p>This is accomplished by typing ssh followed by the hostname of the device you''d like to connect to.</p>\r\n\r\n<img src="../assets/images/tutorials/28.png" alt="ssh1">\r\n\r\n<p>SSH stands for secure shell and it allows us to securely access machines remotely. By default, ssh will assume that you want to authenticate as the same user you use on your local machine.</p>\r\n\r\n<p>To override this and use a different user, simply use remoteusername@hostname as the argument.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons green" id="sshquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(38, 'sshkey1.1', 'SSH Key 1.1', '<h2>Logging In To Remote Devices</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Security Keys</h2>\r\n\r\n</div>\r\n\r\n<p>The first time around it will ask you if you wish to add the remote host to a list of known_hosts, go ahead and say yes by typing the word yes when prompted to do so.</p>\r\n\r\n<img src="../assets/images/tutorials/28.png" alt="ssh2">\r\n<p>It is important to pay attention to this question because this is one of SSH''s major features - host validation.</p>\r\n\r\n<p>To put it simply, ssh will check to make sure that you are connecting to the host that you think you are connecting to.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons green" id="sshquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(39, 'sshpassword1.1', 'SSH Password 1.1', '<h2>Logging In To Remote Devices</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>SSH Passwords</h2>\r\n\r\n</div>\r\n\r\n<p>After saying yes, it will prompt you for your password on the remote system.</p>\r\n\r\n<img src="../assets/images/tutorials/29.png" alt="ssh3">\r\n\r\n<p>If the username that you specified exists and you type in the remote password for it correctly then the system should let you in.</p>\r\n\r\n<p>If it doesn''t, try again and if it still fails, you might check with the administrator that you have an account on that machine and that your username and password is correct.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons green" id="sshquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(40, 'sshtest1.1', 'SSH Test 1.1', '<h2>Logging In To Remote Devices</h2>\r\n<div class=''reflinks green''>\r\n\r\n<h2>Checking SSH Connectivity</h2>\r\n\r\n</div>\r\n\r\n<p>Now that you are in the remote machine, you should be a bit familiar with your surroundings.</p>\r\n\r\n<p>Do a pwd to see what directory you landed in.</p>\r\n<img src="../assets/images/tutorials/30.png" alt=ssh4">\r\n<p>To exit the session, type logout.</p>\r\n<img src="../assets/images/tutorials/31.png" alt="ssh5">\r\n\r\n<p>Congratulations! You have successfully logged in to a remote machine. Now it''s time for the last tutorial, which will teach you how to upload or download files to and from a remote device. </p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons green" id="sshquiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>'),
(41, 'remoteintro1.1', 'Remote Intro 1.1', '<h2> Remote File Management</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Remote File Management Introduction - ''scp''</h2>\r\n\r\n</div>\r\n\r\n<p>What''s great about UNIX is that you can use a command called scp to securely copy files and directories between remote hosts without starting an FTP session or logging into the remote systems explicitly.</p>\r\n\r\n<p>The scp command uses SSH to transfer data, so it requires a password or passphrase for authentication.</p>\r\n<a style="cursor:pointer;" class="buttons pink" id="remotequiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(42, 'scp1.1', 'SCP 1.1', '<h2> Remote File Management</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Copying to a Local Device - ''scp''</h2>\r\n\r\n</div>\r\n\r\n<p>If you are familiar with using the cp command on your local machine, scp is easy to understand.</p>\r\n\r\n<img src="../assets/images/tutorials/32.png" alt="man">\r\n\r\n<p>Both commands require a source and a destination file system location for the copy operation; the big difference is that with scp, one or both of the locations are on a remote system. </p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons pink" id="remotequiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(43, 'copyingremote1.1', 'Copying Remote 1.1', '<h2> Remote File Management</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Copying to a Local Device - ''scp'' continued</h2>\r\n\r\n</div>\r\n\r\n<p>This is an example of copying a local file to a directory on a remote device:</p>\r\n\r\n<img src="../assets/images/tutorials/33.png" alt="man">\r\n\r\n<p>Notice the login stacy to the myhost.com system, followed by a colon and the path to the directory the file image*.jpg is to be copied to.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons pink" id="remotequiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>\r\n<a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(44, 'copyinglocal1.1', 'Copying Local 1.1', '<h2> Remote File Management</h2>\r\n<div class=''reflinks pink''>\r\n\r\n<h2>Copying to a Remote Device - ''scp''</h2>\r\n\r\n</div>\r\n\r\n<p>If you have access to a remote device, try copying the file we created earlier in this tutorial to a remote device on your network.</p>\r\n\r\n<p>Want to download a file from a remote device to your local machine? No problem! You could specify a remote location as the source location if you want to download files.</p>\r\n<img src="../assets/images/tutorials/34.png" alt="scp">\r\n<p>Congratulations, you did it! Check out the conclusion tutorial before you leave.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>\r\n<a style="cursor:pointer;" class="buttons pink" id="remotequiz" onclick="sectionSelect(this, -1)">Jump to Section Quiz</a>'),
(45, 'tutcont1.1', 'Closing 1.1', '<h2>Tutorial Conclusion</h2>\r\n<div class=''reflinks blue''>\r\n\r\n<h2>Congratulations! - Tutorial Conclusion</h2>\r\n\r\n</div>\r\n\r\n<p>Well, there you have it!</p>\r\n\r\n<p>In this tutorial we covered all sorts of things, from fluidly moving through the terminal and through terminal commands, creating files and directories and modifying their permissions, and accessing and uploading/downloading from remote devices- all things that are crucial for every successful web developer to know and understand how to comfortably navigate and take advantage of the exciting new world of development that UNIX has to offer.</p> <a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(46, 'tutcont1.2', 'Closing 1.2', '<h2>Tutorial Conclusion</h2>\r\n<div class=''reflinks blue''>\r\n\r\n<h2>Congratulations! - Tutorial Conclusion continued</h2>\r\n\r\n</div>\r\n\r\n<p>It may be a lot to take in, but we hope that after using this tutorial you recognize and applaud yourself on the skills you have learned and practiced during your time here.</p>\r\n\r\n<p>Don''t be afraid to complete the tutorials or quizzes again, multiple times over and over. Also, feel free to visit the command glossary, which features a short bit of the man page of each command used in this tutorial.</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a> <a style="cursor:pointer;" class="buttons" id="next" onclick="sectionSelect(this, -1)">Next &raquo;</a>'),
(47, 'tutcont1.3', 'Closing 1.3', '<h2>Tutorial Conclusion</h2>\r\n<div class=''reflinks blue''>\r\n\r\n<h2>Congratulations! - Tutorial Conclusion continued</h2>\r\n\r\n</div>\r\n\r\n<p>As always, feel free to visit our ''Contact'' page to contact the developers of the website for any recommendations for things you''d like to see implemented into the tutorial.</p>\r\n\r\n<p>Again, congratulations!</p><a style="cursor:pointer;" class="buttons" id="previous" onclick="sectionSelect(this, -1)">&laquo; Previous</a>'),
(73, 'introquiz', 'introquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz1.html"></iframe>'),
(74, 'commandquiz', 'commandquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz2.html"></iframe>'),
(75, 'helpquiz', 'helpquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz3.html"></iframe>');
INSERT INTO `tutorials` (`id`, `tutorial`, `title`, `content`) VALUES
(76, 'filemanagementquiz', 'filemanagementquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz4.html"></iframe>'),
(77, 'filepermissionsquiz', 'filepermissionsquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz5.html"></iframe>'),
(78, 'sshquiz', 'sshquiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz6.html"></iframe>'),
(79, 'remotequiz', 'remotequiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz7.html"></iframe>'),
(80, 'introQuiz1', 'introQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz1.html"></iframe>'),
(81, 'commandQuiz1', 'commandQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz2.html"></iframe>'),
(82, 'helpQuiz1', 'helpQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz3.html"></iframe>'),
(83, 'filemanagementQuiz1', 'filemanagementQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz4.html"></iframe>'),
(84, 'filepermissionsQuiz1', 'filepermissionsQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz5.html"></iframe>'),
(85, 'sshQuiz1', 'sshQuiz1', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz6.html"></iframe>'),
(86, 'remoteQuiz', 'remoteQuiz', '<iframe id="quiz" src="http://kelvin.ist.rit.edu/~team2/Project/pages/quiz7.html"></iframe>');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
